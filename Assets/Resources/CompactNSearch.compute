#include "Common.hlsl"

#pragma enable_d3d11_debug_symbols
#pragma kernel insertParticleIntoHashGrid
#pragma kernel countingSortFull

float3 HashGridMin;
float HashGridCellLength;

StructuredBuffer<uint> ParticleIndrectArgment_R;

StructuredBuffer<float3> ParticlePosition_R;
StructuredBuffer<float3> ParticleVelocity_R;
StructuredBuffer<float> ParticleDensity_R;

RWStructuredBuffer<float3> SortedParticlePosition_RW;
RWStructuredBuffer<float3> SortedParticleVelocity_RW;
RWStructuredBuffer<float> SortedParticleDensity_RW;

StructuredBuffer<uint> ParticleInnerSortIndex_R;
RWStructuredBuffer<uint> ParticleInnerSortIndex_RW;

StructuredBuffer<uint> ParticleCellIndex_R;
RWStructuredBuffer<uint> ParticleCellIndex_RW;

StructuredBuffer<uint> HashGridCellParticleOffset_R;
RWStructuredBuffer<uint> HashGridCellParticleCount_RW;

/* compute morton code */
uint expandBits3D(uint v)
{
    v &= 0x000003ff; // x = ---- ---- ---- ---- ---- --98 7654 3210
    v = (v ^ (v << 16)) & 0xff0000ff; // x = ---- --98 ---- ---- ---- ---- 7654 3210
    v = (v ^ (v << 8)) & 0x0300f00f; // x = ---- --98 ---- ---- 7654 ---- ---- 3210
    v = (v ^ (v << 4)) & 0x030c30c3; // x = ---- --98 ---- 76-- --54 ---- 32-- --10
    v = (v ^ (v << 2)) & 0x09249249; // x = ---- 9--8 --7- -6-- 5--4 --3- -2-- 1--0
    return v;
}

uint computeMorton3D(uint3 vCellIndex3D)
{
    return (expandBits3D(vCellIndex3D.z) << 2) + (expandBits3D(vCellIndex3D.y) << 1) + expandBits3D(vCellIndex3D.x);
}

[numthreads(SPH_THREAD_NUM, 1, 1)]
void insertParticleIntoHashGrid(uint ThreadIdx : SV_GroupIndex, uint GroupIdx : SV_GroupID)
{
    uint i = ThreadIdx + GroupIdx * SPH_THREAD_NUM;
    if (i >= ParticleIndrectArgment_R[ParticleCountArgumentOffset])
        return;
	
    float3 Postion = ParticlePosition_R[i];
    uint3 Cell3DIndex = uint3((Postion - HashGridMin) / HashGridCellLength);
    uint CellLinerIndex = computeMorton3D(Cell3DIndex);

    ParticleCellIndex_RW[i] = CellLinerIndex;
    
    uint OriginValue;
    InterlockedAdd(HashGridCellParticleCount_RW[CellLinerIndex], 1, OriginValue);
    ParticleInnerSortIndex_RW[i] = OriginValue;
}

[numthreads(SPH_THREAD_NUM, 1, 1)]
void countingSortFull(uint ThreadIdx : SV_GroupIndex, uint GroupIdx : SV_GroupID)
{
    uint i = ThreadIdx + GroupIdx * SPH_THREAD_NUM;
    if (i >= ParticleIndrectArgment_R[ParticleCountArgumentOffset])
        return;
    
    uint CellLinerIndex = ParticleCellIndex_R[i];
    uint Offset = CellLinerIndex == 0 ? 0 : HashGridCellParticleOffset_R[CellLinerIndex - 1];
    uint Index = ParticleInnerSortIndex_R[i];
    uint SortIndex = Offset + Index;
    SortedParticlePosition_RW[SortIndex] = ParticlePosition_R[i];
    SortedParticleVelocity_RW[SortIndex] = ParticleVelocity_R[i];
    SortedParticleDensity_RW[SortIndex] = ParticleDensity_R[i];
}