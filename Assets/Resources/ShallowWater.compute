#define ThreadGroupX 32
#define ThreadGroupY 32

#pragma enable_d3d11_debug_symbols
#pragma kernel updateHeight
#pragma kernel updateVelocity

float2 ShallowWaterGridMin;
uint2 ShallowWaterGridRes;
float ShallowWaterGridCellLength;
float ShallowWaterTimeStep;
float ShallowWaterGravity;

Texture2D<float> TerrainHeightMap_R;
Texture2D<float> VelocityUGrid_R;
RWTexture2D<float> VelocityUGrid_RW;
Texture2D<float> VelocityVGrid_R;
RWTexture2D<float> VelocityVGrid_RW;
Texture2D<float> HeightGrid_R;
RWTexture2D<float> HeightGrid_RW;

SamplerState Sampler_Bilinear_Clamp;

[numthreads(ThreadGroupX, ThreadGroupY, 1)]
void updateHeight(uint2 id : SV_DispatchThreadID)
{
    if (id.x >= ShallowWaterGridRes.x || id.y >= ShallowWaterGridRes.y)
        return;
    
    float CenterHeight = HeightGrid_R.SampleLevel(Sampler_Bilinear_Clamp, (float2) id / (float2) ShallowWaterGridRes, 0);
    float RightHeight = HeightGrid_R.SampleLevel(Sampler_Bilinear_Clamp, ((float2) id + uint2(1, 0)) / (float2) ShallowWaterGridRes, 0);
    float LeftHeight = HeightGrid_R.SampleLevel(Sampler_Bilinear_Clamp, ((float2) id + uint2(-1, 0)) / (float2) ShallowWaterGridRes, 0);
    float UpHeight = HeightGrid_R.SampleLevel(Sampler_Bilinear_Clamp, ((float2) id + uint2(0, 1)) / (float2) ShallowWaterGridRes, 0);
    float DownHeight = HeightGrid_R.SampleLevel(Sampler_Bilinear_Clamp, ((float2) id + uint2(0, -1)) / (float2) ShallowWaterGridRes, 0);
    
    float VelocityULeft = VelocityUGrid_R.SampleLevel(Sampler_Bilinear_Clamp, (float2)id / (float2) (ShallowWaterGridRes + uint2(1, 0)), 0);
    float VelocityURight = VelocityUGrid_R.SampleLevel(Sampler_Bilinear_Clamp, (float2) (id + uint2(1, 0)) / (float2) (ShallowWaterGridRes + uint2(1, 0)), 0);
    float VelocityVDown = VelocityVGrid_R.SampleLevel(Sampler_Bilinear_Clamp, (float2) id / (float2) (ShallowWaterGridRes + uint2(0, 1)), 0);
    float VelocityVUp = VelocityVGrid_R.SampleLevel(Sampler_Bilinear_Clamp, (float2) (id + uint2(0, 1)) / (float2) (ShallowWaterGridRes + uint2(0, 1)), 0);
    
    float HeightEvaluateRight = VelocityURight <= 0 ? RightHeight : CenterHeight;
    float HeightEvaluateLeft = VelocityULeft <= 0 ? LeftHeight : CenterHeight;
    float HeightEvaluateUp = VelocityVUp <= 0 ? UpHeight : CenterHeight;
    float HeightEvaluateDown = VelocityVDown <= 0 ? DownHeight : CenterHeight;

    HeightGrid_RW[id] += (HeightEvaluateRight * VelocityURight - HeightEvaluateLeft * VelocityULeft + HeightEvaluateUp * VelocityVUp - HeightEvaluateDown * VelocityVDown) / ShallowWaterGridCellLength * ShallowWaterTimeStep;
}

[numthreads(ThreadGroupX, ThreadGroupY, 1)]
void updateVelocity(uint2 id : SV_DispatchThreadID)
{
    if (id.x >= ShallowWaterGridRes.x || id.y >= ShallowWaterGridRes.y)
        return;
    
    float CenterHeight = HeightGrid_R.SampleLevel(Sampler_Bilinear_Clamp, (float2) id / (float2) ShallowWaterGridRes, 0);
    float RightHeight = HeightGrid_R.SampleLevel(Sampler_Bilinear_Clamp, ((float2) id + uint2(1, 0)) / (float2) ShallowWaterGridRes, 0);
    float UpHeight = HeightGrid_R.SampleLevel(Sampler_Bilinear_Clamp, ((float2) id + uint2(0, 1)) / (float2) ShallowWaterGridRes, 0);
    
    float CenterTerrainHeight = TerrainHeightMap_R.SampleLevel(Sampler_Bilinear_Clamp, (float2) id / (float2) ShallowWaterGridRes, 0);
    float RightTerrainHeight = TerrainHeightMap_R.SampleLevel(Sampler_Bilinear_Clamp, ((float2) id + uint2(1, 0)) / (float2) ShallowWaterGridRes, 0);
    float UpTerrainHeight = TerrainHeightMap_R.SampleLevel(Sampler_Bilinear_Clamp, ((float2) id + uint2(0, 1)) / (float2) ShallowWaterGridRes, 0);
    
    if (id.x != ShallowWaterGridRes.x - 1)
        VelocityUGrid_RW[id + uint2(1, 0)] += -ShallowWaterGravity / ShallowWaterGridCellLength * ShallowWaterTimeStep *
            ((RightHeight + RightTerrainHeight) - (CenterHeight + CenterTerrainHeight));
    
    if (id.y != ShallowWaterGridRes.y - 1)
        VelocityVGrid_RW[id + uint2(0, 1)] += -ShallowWaterGravity / ShallowWaterGridCellLength * ShallowWaterTimeStep *
            ((UpHeight + UpTerrainHeight) - (CenterHeight + CenterTerrainHeight));

}