#include "../Common.hlsl"

#pragma enable_d3d11_debug_symbols
#pragma kernel ComputeShallowWater

#define ThreadGroupX 25
#define ThreadGroupY 25
#define NUMTHREADS numthreads(ThreadGroupX, ThreadGroupY, 1)

// Sampling macro, just to simplify the code a bit
#define COORDTOLINEAR(id) (id.y * Resolution.x + id.x)
#define CURRENT_SAMPLE(buffer) (buffer[id.y * Resolution.x + id.x])
#define LEFT_SAMPLE(buffer) (buffer[Resolution.x * id.y + max(id.x - 1, 0)])
#define RIGHT_SAMPLE(buffer) (buffer[Resolution.x * id.y + min(id.x + 1, Resolution.x - 1)])
#define UP_SAMPLE(buffer) (buffer[Resolution.x * min(id.y + 1, Resolution.y - 1) + id.x])
#define BOTTOM_SAMPLE(buffer) (buffer[Resolution.x * max(id.y - 1, 0) + id.x])

RWStructuredBuffer<float> HeightBuffer;
RWStructuredBuffer<float> OldHeightBuffer;
RWStructuredBuffer<float> NewHeightBuffer;

// Velocity field (R - velocity x, G - velocity y)
RWTexture2D<float2> VelocityBuffer;

// Fluid simulation properties
int2 Resolution;
float _TimeDelta;
float2 _CellSize;

float _Scale;
float _Damping;
float _VelScale;

float4 _InputControls;

/* Pass 1. Flux field computation */
[NUMTHREADS]
void ComputeShallowWater(uint3 id : SV_DispatchThreadID)
{
    float newHeight = CURRENT_SAMPLE(HeightBuffer);
    float HeightLaplacian = LEFT_SAMPLE(HeightBuffer) + RIGHT_SAMPLE(HeightBuffer) + UP_SAMPLE(HeightBuffer) + BOTTOM_SAMPLE(HeightBuffer) - 4 * CURRENT_SAMPLE(HeightBuffer);
    CURRENT_SAMPLE(NewHeightBuffer) = CURRENT_SAMPLE(HeightBuffer) + _Damping * (CURRENT_SAMPLE(HeightBuffer) - CURRENT_SAMPLE(OldHeightBuffer)) + _Scale * HeightLaplacian;
}